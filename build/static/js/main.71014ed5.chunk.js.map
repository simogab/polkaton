{"version":3,"sources":["config/index.js","substrate-lib/SubstrateContext.js","substrate-lib/utils.js","substrate-lib/components/TxButton.js","substrate-lib/components/DeveloperConsole.js","AccountSelector.js","Balances.js","BlockNumber.js","Events.js","Interactor.js","Metadata.js","NodeInfo.js","TemplateModule.js","Transfer.js","Upgrade.js","BlockInfo.js","Search.js","App.js","index.js"],"names":["configEnv","require","envVars","reduce","mem","n","undefined","process","slice","config","configCommon","queryString","parse","window","location","search","console","log","INIT_STATE","socket","jsonrpc","RPC","types","CUSTOM_TYPES","keyring","keyringState","api","apiError","apiState","reducer","state","action","type","payload","Error","loadAccts","SubstrateContext","React","createContext","SubstrateContextProvider","props","initState","forEach","key","useReducer","dispatch","provider","WsProvider","_api","ApiPromise","rpc","on","isReady","then","err","connect","asyncLoadAccounts","a","web3Enable","APP_NAME","web3Accounts","allAccounts","map","address","meta","name","source","loadAll","isDevelopment","DEVELOPMENT_KEYRING","error","loadAccounts","Provider","value","children","useSubstrate","useContext","utils","paramConversion","num","TxButton","accountPair","label","setStatus","color","style","attrs","disabled","useState","unsub","setUnsub","sudoKey","setSudoKey","palletRpc","callable","inputParams","paramFields","isSudo","isUncheckedSudo","useEffect","query","sudo","isEmpty","toString","acctPair","getFromAcct","isInjected","web3FromSource","injected","fromAcct","setSigner","signer","txResHandler","status","isFinalized","asFinalized","txErrHandler","sudoTx","transformed","transformParams","txExecute","tx","signAndSend","catch","uncheckedSudoTx","sudoUncheckedWeight","signedTx","unsignedTx","send","queryResHandler","result","isNone","emptyAsNull","constant","consts","transaction","opts","paramVal","inputParam","trim","params","field","ind","memo","converted","indexOf","split","e","single","isNumType","Number","parseFloat","parseInt","some","el","Button","basic","onClick","length","every","paramField","param","optional","TxGroupButton","Group","Or","DeveloperConsole","util","utilCrypto","Main","setAccountAddress","accountSelected","setAccountSelected","keyringOptions","getPairs","account","text","toUpperCase","icon","initialAddress","Menu","attached","tabular","backgroundColor","borderColor","paddingTop","paddingBottom","Container","Image","src","size","position","alignItems","target","rel","href","circular","Dropdown","selection","clearable","placeholder","options","onChange","_","dropdown","BalanceAnnotation","accountBalance","setAccountBalance","unsubscribe","system","balance","data","free","toHuman","Label","pointing","Icon","AccountSelector","accounts","balances","setBalances","addresses","unsubscribeAll","multi","balancesMap","acc","index","Grid","Column","Table","celled","striped","Body","Row","Cell","width","textAlign","display","minWidth","compact","finalized","blockNumber","setBlockNumber","blockNumberTimer","setBlockNumberTimer","bestNumber","derive","chain","bestNumberFinalized","number","toNumber","timer","time","id","setInterval","clearInterval","Card","Content","Statistic","extra","BlockNumber","FILTERED_EVENTS","eventFeed","setEventFeed","events","record","event","phase","typeDef","eventName","section","method","includes","summary","extraText","documentation","join","content","allEvents","feedMaxHeight","float","floated","Feed","clear","overflow","maxHeight","Events","argIsOptional","arg","startsWith","interxType","setInterxType","palletRPCs","setPalletRPCs","callables","setCallables","setParamFields","initFormState","formState","setFormState","getApiType","apiType","Object","keys","sort","filter","pr","c","metaType","isPlain","isMap","asMap","isDoubleMap","asDoubleMap","key1","key2","metaArgs","args","metaParam","isOptional","onPalletCallableParamChange","res","onInterxTypeChange","ev","getOptionalMsg","Form","overflowX","inline","Radio","checked","Field","fluid","Input","InteractorSubmit","overflowWrap","Interactor","version","metadata","setMetadata","getMetadata","Header","Meta","Modal","trigger","scrolling","Description","JSON","stringify","Metadata","nodeInfo","setNodeInfo","Promise","all","nodeName","nodeVersion","getInfo","NodeInfo","currentValue","setCurrentValue","formValue","setFormValue","templateModule","something","newValue","unwrap","centered","TemplateModule","addressTo","amount","prev","proposal","setProposal","handleFileChosen","file","fileReader","FileReader","onloadend","buffer","Array","from","Uint8Array","b","padStart","readAsArrayBuffer","accept","files","BlockInfo","blockInfo","setBlockInfo","subscribeNewHeads","header","parentHash","toHex","hash","extrinsicsRoot","stateRoot","getData","info","SearchBlock","inputRef","useRef","handleSearch","searchValue","current","block","getBlock","getBlockHash","ref","accountAddress","getPair","loader","Dimmer","active","Loader","columns","padded","Message","negative","floating","contextRef","createRef","Sticky","context","stackable","stretched","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.71014ed5.chunk.js","sourcesContent":["import configCommon from './common.json';\r\n// Using `require` as `import` does not support dynamic loading (yet).\r\nconst configEnv = require(`./${process.env.NODE_ENV}.json`);\r\n\r\n// Accepting React env vars and aggregating them into `config` object.\r\nconst envVarNames = [\r\n  'REACT_APP_PROVIDER_SOCKET',\r\n  'REACT_APP_DEVELOPMENT_KEYRING'\r\n];\r\nconst envVars = envVarNames.reduce((mem, n) => {\r\n  // Remove the `REACT_APP_` prefix\r\n  if (process.env[n] !== undefined) mem[n.slice(10)] = process.env[n];\r\n  return mem;\r\n}, {});\r\n\r\nconst config = { ...configCommon, ...configEnv, ...envVars };\r\nexport default config;\r\n","import React, { useReducer, useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport jsonrpc from '@polkadot/types/interfaces/jsonrpc';\r\nimport queryString from 'query-string';\r\n\r\nimport { ApiPromise, WsProvider } from '@polkadot/api';\r\nimport { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\r\nimport keyring from '@polkadot/ui-keyring';\r\n\r\nimport config from '../config';\r\n\r\nconst parsedQuery = queryString.parse(window.location.search);\r\nconst connectedSocket = \"wss://rpc.polkadot.io\";\r\nconsole.log(`Connected socket: ${connectedSocket}`);\r\n\r\n///\r\n// Initial state for `useReducer`\r\n\r\nconst INIT_STATE = {\r\n  socket: connectedSocket,\r\n  jsonrpc: { ...jsonrpc, ...config.RPC },\r\n  types: config.CUSTOM_TYPES,\r\n  keyring: null,\r\n  keyringState: null,\r\n  api: null,\r\n  apiError: null,\r\n  apiState: null\r\n};\r\n\r\n///\r\n// Reducer function for `useReducer`\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'CONNECT_INIT':\r\n      return { ...state, apiState: 'CONNECT_INIT' };\r\n\r\n    case 'CONNECT':\r\n      return { ...state, api: action.payload, apiState: 'CONNECTING' };\r\n\r\n    case 'CONNECT_SUCCESS':\r\n      return { ...state, apiState: 'READY' };\r\n\r\n    case 'CONNECT_ERROR':\r\n      return { ...state, apiState: 'ERROR', apiError: action.payload };\r\n\r\n    case 'LOAD_KEYRING':\r\n      return { ...state, keyringState: 'LOADING' };\r\n\r\n    case 'SET_KEYRING':\r\n      return { ...state, keyring: action.payload, keyringState: 'READY' };\r\n\r\n    case 'KEYRING_ERROR':\r\n      return { ...state, keyring: null, keyringState: 'ERROR' };\r\n\r\n    default:\r\n      throw new Error(`Unknown type: ${action.type}`);\r\n  }\r\n};\r\n\r\n///\r\n// Connecting to the Substrate node\r\n\r\nconst connect = (state, dispatch) => {\r\n  const { apiState, socket, jsonrpc, types } = state;\r\n  // We only want this function to be performed once\r\n  if (apiState) return;\r\n\r\n  dispatch({ type: 'CONNECT_INIT' });\r\n\r\n  const provider = new WsProvider(socket);\r\n  const _api = new ApiPromise({ provider, types, rpc: jsonrpc });\r\n\r\n  // Set listeners for disconnection and reconnection event.\r\n  _api.on('connected', () => {\r\n    dispatch({ type: 'CONNECT', payload: _api });\r\n    // `ready` event is not emitted upon reconnection and is checked explicitly here.\r\n    _api.isReady.then((_api) => dispatch({ type: 'CONNECT_SUCCESS' }));\r\n  });\r\n  _api.on('ready', () => dispatch({ type: 'CONNECT_SUCCESS' }));\r\n  _api.on('error', err => dispatch({ type: 'CONNECT_ERROR', payload: err }));\r\n};\r\n\r\n///\r\n// Loading accounts from dev and polkadot-js extension\r\n\r\nlet loadAccts = false;\r\nconst loadAccounts = (state, dispatch) => {\r\n  const asyncLoadAccounts = async () => {\r\n    dispatch({ type: 'LOAD_KEYRING' });\r\n    try {\r\n      await web3Enable(config.APP_NAME);\r\n      let allAccounts = await web3Accounts();\r\n      allAccounts = allAccounts.map(({ address, meta }) =>\r\n        ({ address, meta: { ...meta, name: `${meta.name} (${meta.source})` } }));\r\n      keyring.loadAll({ isDevelopment: config.DEVELOPMENT_KEYRING }, allAccounts);\r\n      dispatch({ type: 'SET_KEYRING', payload: keyring });\r\n    } catch (e) {\r\n      console.error(e);\r\n      dispatch({ type: 'KEYRING_ERROR' });\r\n    }\r\n  };\r\n\r\n  const { keyringState } = state;\r\n  // If `keyringState` is not null `asyncLoadAccounts` is running.\r\n  if (keyringState) return;\r\n  // If `loadAccts` is true, the `asyncLoadAccounts` has been run once.\r\n  if (loadAccts) return dispatch({ type: 'SET_KEYRING', payload: keyring });\r\n\r\n  // This is the heavy duty work\r\n  loadAccts = true;\r\n  asyncLoadAccounts();\r\n};\r\n\r\nconst SubstrateContext = React.createContext();\r\n\r\nconst SubstrateContextProvider = (props) => {\r\n  // filtering props and merge with default param value\r\n  const initState = { ...INIT_STATE };\r\n  const neededPropNames = ['socket', 'types'];\r\n  neededPropNames.forEach(key => {\r\n    initState[key] = (typeof props[key] === 'undefined' ? initState[key] : props[key]);\r\n  });\r\n\r\n  const [state, dispatch] = useReducer(reducer, initState);\r\n  connect(state, dispatch);\r\n  loadAccounts(state, dispatch);\r\n\r\n  return <SubstrateContext.Provider value={state}>\r\n    {props.children}\r\n  </SubstrateContext.Provider>;\r\n};\r\n\r\n// prop typechecking\r\nSubstrateContextProvider.propTypes = {\r\n  socket: PropTypes.string,\r\n  types: PropTypes.object\r\n};\r\n\r\nconst useSubstrate = () => ({ ...useContext(SubstrateContext) });\r\n\r\nexport { SubstrateContextProvider, useSubstrate };\r\n","const utils = {\r\n  paramConversion: {\r\n    num: [\r\n      'Compact<Balance>',\r\n      'BalanceOf',\r\n      'u8', 'u16', 'u32', 'u64', 'u128',\r\n      'i8', 'i16', 'i32', 'i64', 'i128'\r\n    ]\r\n  }\r\n};\r\n\r\nexport default utils;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'semantic-ui-react';\r\nimport { web3FromSource } from '@polkadot/extension-dapp';\r\n\r\nimport { useSubstrate } from '../';\r\nimport utils from '../utils';\r\n\r\nfunction TxButton ({\r\n  accountPair = null,\r\n  label,\r\n  setStatus,\r\n  color = 'blue',\r\n  style = null,\r\n  type = 'QUERY',\r\n  attrs = null,\r\n  disabled = false\r\n}) {\r\n  // Hooks\r\n  const { api } = useSubstrate();\r\n  const [unsub, setUnsub] = useState(null);\r\n  const [sudoKey, setSudoKey] = useState(null);\r\n\r\n  const { palletRpc, callable, inputParams, paramFields } = attrs;\r\n\r\n  const isQuery = () => type === 'QUERY';\r\n  const isSudo = () => type === 'SUDO-TX';\r\n  const isUncheckedSudo = () => type === 'UNCHECKED-SUDO-TX';\r\n  const isUnsigned = () => type === 'UNSIGNED-TX';\r\n  const isSigned = () => type === 'SIGNED-TX';\r\n  const isRpc = () => type === 'RPC';\r\n  const isConstant = () => type === 'CONSTANT';\r\n\r\n  const loadSudoKey = () => {\r\n    (async function () {\r\n      if (!api || !api.query.sudo) { return; }\r\n      const sudoKey = await api.query.sudo.key();\r\n      sudoKey.isEmpty ? setSudoKey(null) : setSudoKey(sudoKey.toString());\r\n    })();\r\n  };\r\n\r\n  useEffect(loadSudoKey, [api]);\r\n\r\n  const getFromAcct = async () => {\r\n    const {\r\n      address,\r\n      meta: { source, isInjected }\r\n    } = accountPair;\r\n    let fromAcct;\r\n\r\n    // signer is from Polkadot-js browser extension\r\n    if (isInjected) {\r\n      const injected = await web3FromSource(source);\r\n      fromAcct = address;\r\n      api.setSigner(injected.signer);\r\n    } else {\r\n      fromAcct = accountPair;\r\n    }\r\n\r\n    return fromAcct;\r\n  };\r\n\r\n  const txResHandler = ({ status }) =>\r\n    status.isFinalized\r\n      ? setStatus(`😉 Finalized. Block hash: ${status.asFinalized.toString()}`)\r\n      : setStatus(`Current transaction status: ${status.type}`);\r\n\r\n  const txErrHandler = err =>\r\n    setStatus(`😞 Transaction Failed: ${err.toString()}`);\r\n\r\n  const sudoTx = async () => {\r\n    const fromAcct = await getFromAcct();\r\n    const transformed = transformParams(paramFields, inputParams);\r\n    // transformed can be empty parameters\r\n    const txExecute = transformed\r\n      ? api.tx.sudo.sudo(api.tx[palletRpc][callable](...transformed))\r\n      : api.tx.sudo.sudo(api.tx[palletRpc][callable]());\r\n\r\n    const unsub = txExecute.signAndSend(fromAcct, txResHandler)\r\n      .catch(txErrHandler);\r\n    setUnsub(() => unsub);\r\n  };\r\n\r\n  const uncheckedSudoTx = async () => {\r\n    const fromAcct = await getFromAcct();\r\n    const txExecute =\r\n        api.tx.sudo.sudoUncheckedWeight(api.tx[palletRpc][callable](...inputParams), 0);\r\n\r\n    const unsub = txExecute.signAndSend(fromAcct, txResHandler)\r\n      .catch(txErrHandler);\r\n    setUnsub(() => unsub);\r\n  };\r\n\r\n  const signedTx = async () => {\r\n    const fromAcct = await getFromAcct();\r\n    const transformed = transformParams(paramFields, inputParams);\r\n    // transformed can be empty parameters\r\n\r\n    const txExecute = transformed\r\n      ? api.tx[palletRpc][callable](...transformed)\r\n      : api.tx[palletRpc][callable]();\r\n\r\n    const unsub = await txExecute.signAndSend(fromAcct, txResHandler)\r\n      .catch(txErrHandler);\r\n    setUnsub(() => unsub);\r\n  };\r\n\r\n  const unsignedTx = async () => {\r\n    const transformed = transformParams(paramFields, inputParams);\r\n    // transformed can be empty parameters\r\n    const txExecute = transformed\r\n      ? api.tx[palletRpc][callable](...transformed)\r\n      : api.tx[palletRpc][callable]();\r\n\r\n    const unsub = await txExecute.send(txResHandler)\r\n      .catch(txErrHandler);\r\n    setUnsub(() => unsub);\r\n  };\r\n\r\n  const queryResHandler = result =>\r\n    result.isNone ? setStatus('None') : setStatus(result.toString());\r\n\r\n  const query = async () => {\r\n    const transformed = transformParams(paramFields, inputParams);\r\n    const unsub = await api.query[palletRpc][callable](...transformed, queryResHandler);\r\n    setUnsub(() => unsub);\r\n  };\r\n\r\n  const rpc = async () => {\r\n    const transformed = transformParams(paramFields, inputParams, { emptyAsNull: false });\r\n    const unsub = await api.rpc[palletRpc][callable](...transformed, queryResHandler);\r\n    setUnsub(() => unsub);\r\n  };\r\n\r\n  const constant = () => {\r\n    const result = api.consts[palletRpc][callable];\r\n    result.isNone ? setStatus('None') : setStatus(result.toString());\r\n  };\r\n\r\n  const transaction = async () => {\r\n    if (unsub) {\r\n      unsub();\r\n      setUnsub(null);\r\n    }\r\n\r\n    setStatus('Sending...');\r\n\r\n    (isSudo() && sudoTx()) ||\r\n    (isUncheckedSudo() && uncheckedSudoTx()) ||\r\n    (isSigned() && signedTx()) ||\r\n    (isUnsigned() && unsignedTx()) ||\r\n    (isQuery() && query()) ||\r\n    (isRpc() && rpc()) ||\r\n    (isConstant() && constant());\r\n  };\r\n\r\n  const transformParams = (paramFields, inputParams, opts = { emptyAsNull: true }) => {\r\n    // if `opts.emptyAsNull` is true, empty param value will be added to res as `null`.\r\n    //   Otherwise, it will not be added\r\n    const paramVal = inputParams.map(inputParam => {\r\n      // To cater the js quirk that `null` is a type of `object`.\r\n      if (typeof inputParam === 'object' && inputParam !== null && typeof inputParam.value === 'string') {\r\n        return inputParam.value.trim();\r\n      } else if (typeof inputParam === 'string') {\r\n        return inputParam.trim();\r\n      }\r\n      return inputParam;\r\n    });\r\n    const params = paramFields.map((field, ind) => ({ ...field, value: paramVal[ind] || null }));\r\n\r\n    return params.reduce((memo, { type = 'string', value }) => {\r\n      if (value == null || value === '') return (opts.emptyAsNull ? [...memo, null] : memo);\r\n\r\n      let converted = value;\r\n\r\n      // Deal with a vector\r\n      if (type.indexOf('Vec<') >= 0) {\r\n        converted = converted.split(',').map(e => e.trim());\r\n        converted = converted.map(single => isNumType(type)\r\n          ? (single.indexOf('.') >= 0 ? Number.parseFloat(single) : Number.parseInt(single))\r\n          : single\r\n        );\r\n        return [...memo, converted];\r\n      }\r\n\r\n      // Deal with a single value\r\n      if (isNumType(type)) {\r\n        converted = converted.indexOf('.') >= 0 ? Number.parseFloat(converted) : Number.parseInt(converted);\r\n      }\r\n      return [...memo, converted];\r\n    }, []);\r\n  };\r\n\r\n  const isNumType = type =>\r\n    utils.paramConversion.num.some(el => type.indexOf(el) >= 0);\r\n\r\n  const allParamsFilled = () => {\r\n    if (paramFields.length === 0) { return true; }\r\n\r\n    return paramFields.every((paramField, ind) => {\r\n      const param = inputParams[ind];\r\n      if (paramField.optional) { return true; }\r\n      if (param == null) { return false; }\r\n\r\n      const value = typeof param === 'object' ? param.value : param;\r\n      return value !== null && value !== '';\r\n    });\r\n  };\r\n\r\n  const isSudoer = acctPair => {\r\n    if (!sudoKey || !acctPair) { return false; }\r\n    return acctPair.address === sudoKey;\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      basic\r\n      color={color}\r\n      style={style}\r\n      type='submit'\r\n      onClick={transaction}\r\n      disabled={ disabled || !palletRpc || !callable || !allParamsFilled() ||\r\n        ((isSudo() || isUncheckedSudo()) && !isSudoer(accountPair)) }\r\n    >\r\n      {label}\r\n    </Button>\r\n  );\r\n}\r\n\r\n// prop type checking\r\nTxButton.propTypes = {\r\n  accountPair: PropTypes.object,\r\n  setStatus: PropTypes.func.isRequired,\r\n  type: PropTypes.oneOf([\r\n    'QUERY', 'RPC', 'SIGNED-TX', 'UNSIGNED-TX', 'SUDO-TX', 'UNCHECKED-SUDO-TX',\r\n    'CONSTANT']).isRequired,\r\n  attrs: PropTypes.shape({\r\n    palletRpc: PropTypes.string,\r\n    callable: PropTypes.string,\r\n    inputParams: PropTypes.array,\r\n    paramFields: PropTypes.array\r\n  }).isRequired\r\n};\r\n\r\nfunction TxGroupButton (props) {\r\n  return (\r\n    <Button.Group>\r\n      <TxButton\r\n        label='Unsigned'\r\n        type='UNSIGNED-TX'\r\n        color='grey'\r\n        {...props}\r\n      />\r\n      <Button.Or />\r\n      <TxButton\r\n        label='Signed'\r\n        type='SIGNED-TX'\r\n        color='blue'\r\n        {...props}\r\n      />\r\n      <Button.Or />\r\n      <TxButton\r\n        label='SUDO'\r\n        type='SUDO-TX'\r\n        color='red'\r\n        {...props}\r\n      />\r\n    </Button.Group>\r\n  );\r\n}\r\n\r\nexport { TxButton, TxGroupButton };\r\n","// This component will simply add utility functions to your developer console.\r\nimport { useSubstrate } from '../';\r\n\r\nexport default function DeveloperConsole (props) {\r\n  const { api, apiState, keyring, keyringState } = useSubstrate();\r\n  if (apiState === 'READY') { window.api = api; }\r\n  if (keyringState === 'READY') { window.keyring = keyring; }\r\n  window.util = require('@polkadot/util');\r\n  window.utilCrypto = require('@polkadot/util-crypto');\r\n\r\n  return null;\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\n\r\nimport {\r\n  Menu,\r\n  Button,\r\n  Dropdown,\r\n  Container,\r\n  Icon,\r\n  Image,\r\n  Label\r\n} from 'semantic-ui-react';\r\n\r\nimport { useSubstrate } from './substrate-lib';\r\n\r\nfunction Main (props) {\r\n  const { keyring } = useSubstrate();\r\n  const { setAccountAddress } = props;\r\n  const [accountSelected, setAccountSelected] = useState('');\r\n\r\n  // Get the list of accounts we possess the private key for\r\n  const keyringOptions = keyring.getPairs().map(account => ({\r\n    key: account.address,\r\n    value: account.address,\r\n    text: account.meta.name.toUpperCase(),\r\n    icon: 'user'\r\n  }));\r\n\r\n  const initialAddress =\r\n    keyringOptions.length > 0 ? keyringOptions[0].value : '';\r\n\r\n  // Set the initial address\r\n  useEffect(() => {\r\n    setAccountAddress(initialAddress);\r\n    setAccountSelected(initialAddress);\r\n  }, [setAccountAddress, initialAddress]);\r\n\r\n  const onChange = address => {\r\n    // Update state with new account address\r\n    setAccountAddress(address);\r\n    setAccountSelected(address);\r\n  };\r\n\r\n  return (\r\n    <Menu\r\n      attached='top'\r\n      tabular\r\n      style={{\r\n        backgroundColor: '#fff',\r\n        borderColor: '#fff',\r\n        paddingTop: '1em',\r\n        paddingBottom: '1em'\r\n      }}\r\n    >\r\n      <Container>\r\n        <Menu.Menu>\r\n          <Image src={`${process.env.PUBLIC_URL}/assets/substrate-logo.png`} size='mini' />\r\n        </Menu.Menu>\r\n        <Menu.Menu position='right' style={{ alignItems: 'center' }}>\r\n          { !accountSelected\r\n            ? <span>\r\n              Add your account with the{' '}\r\n              <a\r\n                target='_blank'\r\n                rel='noopener noreferrer'\r\n                href='https://github.com/polkadot-js/extension'\r\n              >\r\n                Polkadot JS Extension\r\n              </a>\r\n            </span>\r\n            : null }\r\n          <CopyToClipboard text={accountSelected}>\r\n            <Button\r\n              basic\r\n              circular\r\n              size='large'\r\n              icon='user'\r\n              color={accountSelected ? 'green' : 'red'}\r\n            />\r\n          </CopyToClipboard>\r\n          <Dropdown\r\n            search\r\n            selection\r\n            clearable\r\n            placeholder='Select an account'\r\n            options={keyringOptions}\r\n            onChange={(_, dropdown) => {\r\n              onChange(dropdown.value);\r\n            }}\r\n            value={accountSelected}\r\n          />\r\n          <BalanceAnnotation accountSelected={accountSelected} />\r\n        </Menu.Menu>\r\n      </Container>\r\n    </Menu>\r\n  );\r\n}\r\n\r\nfunction BalanceAnnotation (props) {\r\n  const { accountSelected } = props;\r\n  const { api } = useSubstrate();\r\n  const [accountBalance, setAccountBalance] = useState(0);\r\n\r\n  // When account address changes, update subscriptions\r\n  useEffect(() => {\r\n    let unsubscribe;\r\n\r\n    // If the user has selected an address, create a new subscription\r\n    accountSelected &&\r\n      api.query.system.account(accountSelected, balance => {\r\n        setAccountBalance(balance.data.free.toHuman());\r\n      })\r\n        .then(unsub => {\r\n          unsubscribe = unsub;\r\n        })\r\n        .catch(console.error);\r\n\r\n    return () => unsubscribe && unsubscribe();\r\n  }, [api, accountSelected]);\r\n\r\n  return accountSelected ? (\r\n    <Label pointing='left'>\r\n      <Icon name='money' color='green' />\r\n      {accountBalance}\r\n    </Label>\r\n  ) : null;\r\n}\r\n\r\nexport default function AccountSelector (props) {\r\n  const { api, keyring } = useSubstrate();\r\n  return keyring.getPairs && api.query ? <Main {...props} /> : null;\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Table, Grid, Button } from 'semantic-ui-react';\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport { useSubstrate } from './substrate-lib';\r\n\r\nexport default function Main (props) {\r\n  const { api, keyring } = useSubstrate();\r\n  const accounts = keyring.getPairs();\r\n  const [balances, setBalances] = useState({});\r\n\r\n  useEffect(() => {\r\n    const addresses = keyring.getPairs().map(account => account.address);\r\n    let unsubscribeAll = null;\r\n\r\n    api.query.system.account\r\n      .multi(addresses, balances => {\r\n        const balancesMap = addresses.reduce((acc, address, index) => ({\r\n          ...acc, [address]: balances[index].data.free.toHuman()\r\n        }), {});\r\n        setBalances(balancesMap);\r\n      }).then(unsub => {\r\n        unsubscribeAll = unsub;\r\n      }).catch(console.error);\r\n\r\n    return () => unsubscribeAll && unsubscribeAll();\r\n  }, [api, keyring, setBalances]);\r\n\r\n  return (\r\n    <Grid.Column>\r\n      <h1>Balances</h1>\r\n      <Table celled striped size='small'>\r\n        <Table.Body>{accounts.map(account =>\r\n          <Table.Row key={account.address}>\r\n            <Table.Cell width={3} textAlign='right'>{account.meta.name}</Table.Cell>\r\n            <Table.Cell width={10}>\r\n              <span style={{ display: 'inline-block', minWidth: '31em' }}>\r\n                {account.address}\r\n              </span>\r\n              <CopyToClipboard text={account.address}>\r\n                <Button\r\n                  basic\r\n                  circular\r\n                  compact\r\n                  size='mini'\r\n                  color='blue'\r\n                  icon='copy outline'\r\n                />\r\n              </CopyToClipboard>\r\n            </Table.Cell>\r\n            <Table.Cell width={3}>{\r\n              balances && balances[account.address] &&\r\n              balances[account.address]\r\n            }</Table.Cell>\r\n          </Table.Row>\r\n        )}\r\n        </Table.Body>\r\n      </Table>\r\n    </Grid.Column>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Statistic, Grid, Card, Icon } from 'semantic-ui-react';\r\n\r\nimport { useSubstrate } from './substrate-lib';\r\n\r\nfunction Main (props) {\r\n  const { api } = useSubstrate();\r\n  const { finalized } = props;\r\n  const [blockNumber, setBlockNumber] = useState(0);\r\n  const [blockNumberTimer, setBlockNumberTimer] = useState(0);\r\n\r\n  const bestNumber = finalized\r\n    ? api.derive.chain.bestNumberFinalized\r\n    : api.derive.chain.bestNumber;\r\n\r\n  useEffect(() => {\r\n    let unsubscribeAll = null;\r\n\r\n    bestNumber(number => {\r\n      setBlockNumber(number.toNumber());\r\n      setBlockNumberTimer(0);\r\n    })\r\n      .then(unsub => {\r\n        unsubscribeAll = unsub;\r\n      })\r\n      .catch(console.error);\r\n\r\n    return () => unsubscribeAll && unsubscribeAll();\r\n  }, [bestNumber]);\r\n\r\n  const timer = () => {\r\n    setBlockNumberTimer(time => time + 1);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const id = setInterval(timer, 1000);\r\n    return () => clearInterval(id);\r\n  }, []);\r\n\r\n  return (\r\n    <Grid.Column>\r\n      <Card>\r\n        <Card.Content textAlign='center'>\r\n          <Statistic\r\n            label={(finalized ? 'Finalized' : 'Current') + ' Block'}\r\n            value={blockNumber}\r\n          />\r\n        </Card.Content>\r\n        <Card.Content extra>\r\n          <Icon name='time' /> {blockNumberTimer}\r\n        </Card.Content>\r\n      </Card>\r\n    </Grid.Column>\r\n  );\r\n}\r\n\r\nexport default function BlockNumber (props) {\r\n  const { api } = useSubstrate();\r\n  return api.derive &&\r\n    api.derive.chain &&\r\n    api.derive.chain.bestNumber &&\r\n    api.derive.chain.bestNumberFinalized ? (\r\n      <Main {...props} />\r\n    ) : null;\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Feed, Grid, Button } from 'semantic-ui-react';\r\n\r\nimport { useSubstrate } from './substrate-lib';\r\n\r\n// Events to be filtered from feed\r\nconst FILTERED_EVENTS = [\r\n  'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":0})',\r\n  'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":1})'\r\n];\r\n\r\nfunction Main (props) {\r\n  const { api } = useSubstrate();\r\n  const [eventFeed, setEventFeed] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let unsub = null;\r\n    const allEvents = async () => {\r\n      unsub = await api.query.system.events(events => {\r\n        // loop through the Vec<EventRecord>\r\n        events.forEach(record => {\r\n          // extract the phase, event and the event types\r\n          const { event, phase } = record;\r\n          const types = event.typeDef;\r\n\r\n          // show what we are busy with\r\n          const eventName = `${event.section}:${\r\n            event.method\r\n          }:: (phase=${phase.toString()})`;\r\n\r\n          if (FILTERED_EVENTS.includes(eventName)) return;\r\n\r\n          // loop through each of the parameters, displaying the type and data\r\n          const params = event.data.map(\r\n            (data, index) => `${types[index].type}: ${data.toString()}`\r\n          );\r\n\r\n          setEventFeed(e => [{\r\n            icon: 'bell',\r\n            summary: `${eventName}-${e.length}`,\r\n            extraText: event.meta.documentation.join(', ').toString(),\r\n            content: params.join(', ')\r\n          }, ...e]);\r\n        });\r\n      });\r\n    };\r\n\r\n    allEvents();\r\n    return () => unsub && unsub();\r\n  }, [api.query.system]);\r\n\r\n  const { feedMaxHeight = 250 } = props;\r\n\r\n  return (\r\n    <Grid.Column width={8}>\r\n      <h1 style={{ float: 'left' }}>Events</h1>\r\n      <Button\r\n        basic circular\r\n        size='mini'\r\n        color='grey'\r\n        floated='right'\r\n        icon='erase'\r\n        onClick={ _ => setEventFeed([]) }\r\n      />\r\n      <Feed style={{ clear: 'both', overflow: 'auto', maxHeight: feedMaxHeight }} events={eventFeed} />\r\n    </Grid.Column>\r\n  );\r\n}\r\n\r\nexport default function Events (props) {\r\n  const { api } = useSubstrate();\r\n  return api.query && api.query.system && api.query.system.events ? (\r\n    <Main {...props} />\r\n  ) : null;\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Grid, Form, Dropdown, Input, Label } from 'semantic-ui-react';\r\n\r\nimport { useSubstrate } from './substrate-lib';\r\nimport { TxButton, TxGroupButton } from './substrate-lib/components';\r\n\r\nconst argIsOptional = (arg) =>\r\n  arg.type.toString().startsWith('Option<');\r\n\r\nfunction Main (props) {\r\n  const { api, jsonrpc } = useSubstrate();\r\n  const { accountPair } = props;\r\n  const [status, setStatus] = useState(null);\r\n\r\n  const [interxType, setInterxType] = useState('EXTRINSIC');\r\n  const [palletRPCs, setPalletRPCs] = useState([]);\r\n  const [callables, setCallables] = useState([]);\r\n  const [paramFields, setParamFields] = useState([]);\r\n\r\n  const initFormState = {\r\n    palletRpc: '',\r\n    callable: '',\r\n    inputParams: []\r\n  };\r\n\r\n  const [formState, setFormState] = useState(initFormState);\r\n  const { palletRpc, callable, inputParams } = formState;\r\n\r\n  const getApiType = (api, interxType) => {\r\n    if (interxType === 'QUERY') {\r\n      return api.query;\r\n    } else if (interxType === 'EXTRINSIC') {\r\n      return api.tx;\r\n    } else if (interxType === 'RPC') {\r\n      return api.rpc;\r\n    } else {\r\n      return api.consts;\r\n    }\r\n  };\r\n\r\n  const updatePalletRPCs = () => {\r\n    if (!api) { return; }\r\n    const apiType = getApiType(api, interxType);\r\n    const palletRPCs = Object.keys(apiType).sort()\r\n      .filter(pr => Object.keys(apiType[pr]).length > 0)\r\n      .map(pr => ({ key: pr, value: pr, text: pr }));\r\n    setPalletRPCs(palletRPCs);\r\n  };\r\n\r\n  const updateCallables = () => {\r\n    if (!api || palletRpc === '') { return; }\r\n    const callables = Object.keys(getApiType(api, interxType)[palletRpc]).sort()\r\n      .map(c => ({ key: c, value: c, text: c }));\r\n    setCallables(callables);\r\n  };\r\n\r\n  const updateParamFields = () => {\r\n    if (!api || palletRpc === '' || callable === '') {\r\n      setParamFields([]);\r\n      return;\r\n    }\r\n\r\n    let paramFields = [];\r\n\r\n    if (interxType === 'QUERY') {\r\n      const metaType = api.query[palletRpc][callable].meta.type;\r\n      if (metaType.isPlain) {\r\n        // Do nothing as `paramFields` is already set to []\r\n      } else if (metaType.isMap) {\r\n        paramFields = [{\r\n          name: metaType.asMap.key.toString(),\r\n          type: metaType.asMap.key.toString(),\r\n          optional: false\r\n        }];\r\n      } else if (metaType.isDoubleMap) {\r\n        paramFields = [{\r\n          name: metaType.asDoubleMap.key1.toString(),\r\n          type: metaType.asDoubleMap.key1.toString(),\r\n          optional: false\r\n        }, {\r\n          name: metaType.asDoubleMap.key2.toString(),\r\n          type: metaType.asDoubleMap.key2.toString(),\r\n          optional: false\r\n        }];\r\n      }\r\n    } else if (interxType === 'EXTRINSIC') {\r\n      const metaArgs = api.tx[palletRpc][callable].meta.args;\r\n\r\n      if (metaArgs && metaArgs.length > 0) {\r\n        paramFields = metaArgs.map(arg => ({\r\n          name: arg.name.toString(),\r\n          type: arg.type.toString(),\r\n          optional: argIsOptional(arg)\r\n        }));\r\n      }\r\n    } else if (interxType === 'RPC') {\r\n      let metaParam = [];\r\n\r\n      if (jsonrpc[palletRpc] && jsonrpc[palletRpc][callable]) {\r\n        metaParam = jsonrpc[palletRpc][callable].params;\r\n      }\r\n\r\n      if (metaParam.length > 0) {\r\n        paramFields = metaParam.map(arg => ({\r\n          name: arg.name,\r\n          type: arg.type,\r\n          optional: arg.isOptional || false\r\n        }));\r\n      }\r\n    } else if (interxType === 'CONSTANT') {\r\n      paramFields = [];\r\n    }\r\n\r\n    setParamFields(paramFields);\r\n  };\r\n\r\n  useEffect(updatePalletRPCs, [api, interxType]);\r\n  useEffect(updateCallables, [api, interxType, palletRpc]);\r\n  useEffect(updateParamFields, [api, interxType, palletRpc, callable]);\r\n\r\n  const onPalletCallableParamChange = (_, data) => {\r\n    setFormState(formState => {\r\n      let res;\r\n      const { state, value } = data;\r\n      if (typeof state === 'object') {\r\n        // Input parameter updated\r\n        const { ind, paramField: { type } } = state;\r\n        const inputParams = [...formState.inputParams];\r\n        inputParams[ind] = { type, value };\r\n        res = { ...formState, inputParams };\r\n      } else if (state === 'palletRpc') {\r\n        res = { ...formState, [state]: value, callable: '', inputParams: [] };\r\n      } else if (state === 'callable') {\r\n        res = { ...formState, [state]: value, inputParams: [] };\r\n      }\r\n      return res;\r\n    });\r\n  };\r\n\r\n  const onInterxTypeChange = (ev, data) => {\r\n    setInterxType(data.value);\r\n    // clear the formState\r\n    setFormState(initFormState);\r\n  };\r\n\r\n  const getOptionalMsg = (interxType) =>\r\n    interxType === 'RPC'\r\n      ? 'Optional Parameter'\r\n      : 'Leaving this field as blank will submit a NONE value';\r\n\r\n  return (\r\n    <Grid.Column width={8}>\r\n      <h1>Pallet Interactor</h1>\r\n      <Form>\r\n        <Form.Group style={{ overflowX: 'auto' }} inline>\r\n          <label>Interaction Type</label>\r\n          <Form.Radio\r\n            label='Extrinsic'\r\n            name='interxType'\r\n            value='EXTRINSIC'\r\n            checked={interxType === 'EXTRINSIC'}\r\n            onChange={onInterxTypeChange}\r\n          />\r\n          <Form.Radio\r\n            label='Query'\r\n            name='interxType'\r\n            value='QUERY'\r\n            checked={interxType === 'QUERY'}\r\n            onChange={onInterxTypeChange}\r\n          />\r\n          <Form.Radio\r\n            label='RPC'\r\n            name='interxType'\r\n            value='RPC'\r\n            checked={interxType === 'RPC'}\r\n            onChange={onInterxTypeChange}\r\n          />\r\n          <Form.Radio\r\n            label='Constant'\r\n            name='interxType'\r\n            value='CONSTANT'\r\n            checked={interxType === 'CONSTANT'}\r\n            onChange={onInterxTypeChange}\r\n          />\r\n        </Form.Group>\r\n        <Form.Field>\r\n          <Dropdown\r\n            placeholder='Pallets / RPC'\r\n            fluid\r\n            label='Pallet / RPC'\r\n            onChange={onPalletCallableParamChange}\r\n            search\r\n            selection\r\n            state='palletRpc'\r\n            value={palletRpc}\r\n            options={palletRPCs}\r\n          />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <Dropdown\r\n            placeholder='Callables'\r\n            fluid\r\n            label='Callable'\r\n            onChange={onPalletCallableParamChange}\r\n            search\r\n            selection\r\n            state='callable'\r\n            value={callable}\r\n            options={callables}\r\n          />\r\n        </Form.Field>\r\n        {paramFields.map((paramField, ind) =>\r\n          <Form.Field key={`${paramField.name}-${paramField.type}`}>\r\n            <Input\r\n              placeholder={paramField.type}\r\n              fluid\r\n              type='text'\r\n              label={paramField.name}\r\n              state={{ ind, paramField }}\r\n              value={ inputParams[ind] ? inputParams[ind].value : '' }\r\n              onChange={onPalletCallableParamChange}\r\n            />\r\n            { paramField.optional\r\n              ? <Label\r\n                basic\r\n                pointing\r\n                color='teal'\r\n                content = { getOptionalMsg(interxType) }\r\n              />\r\n              : null\r\n            }\r\n          </Form.Field>\r\n        )}\r\n        <Form.Field style={{ textAlign: 'center' }}>\r\n          <InteractorSubmit\r\n            accountPair={accountPair}\r\n            setStatus={setStatus}\r\n            attrs={{ interxType, palletRpc, callable, inputParams, paramFields }}\r\n          />\r\n        </Form.Field>\r\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\r\n      </Form>\r\n    </Grid.Column>\r\n  );\r\n}\r\n\r\nfunction InteractorSubmit (props) {\r\n  const { attrs: { interxType } } = props;\r\n  if (interxType === 'QUERY') {\r\n    return <TxButton\r\n      label = 'Query'\r\n      type = 'QUERY'\r\n      color = 'blue'\r\n      {...props}\r\n    />;\r\n  } else if (interxType === 'EXTRINSIC') {\r\n    return <TxGroupButton {...props} />;\r\n  } else if (interxType === 'RPC' || interxType === 'CONSTANT') {\r\n    return <TxButton\r\n      label = 'Submit'\r\n      type = {interxType}\r\n      color = 'blue'\r\n      {...props}\r\n    />;\r\n  }\r\n}\r\n\r\nexport default function Interactor (props) {\r\n  const { api } = useSubstrate();\r\n  return api.tx ? <Main {...props} /> : null;\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Grid, Modal, Button, Card } from 'semantic-ui-react';\r\n\r\nimport { useSubstrate } from './substrate-lib';\r\n\r\nfunction Main (props) {\r\n  const { api } = useSubstrate();\r\n  const [metadata, setMetadata] = useState({ data: null, version: null });\r\n\r\n  useEffect(() => {\r\n    const getMetadata = async () => {\r\n      try {\r\n        const data = await api.rpc.state.getMetadata();\r\n        setMetadata({ data, version: data.version });\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n    getMetadata();\r\n  }, [api.rpc.state]);\r\n\r\n  return (\r\n    <Grid.Column>\r\n      <Card>\r\n        <Card.Content>\r\n          <Card.Header>Metadata</Card.Header>\r\n          <Card.Meta>\r\n            <span>v{metadata.version}</span>\r\n          </Card.Meta>\r\n        </Card.Content>\r\n        <Card.Content extra>\r\n          <Modal trigger={<Button>Show Metadata</Button>}>\r\n            <Modal.Header>Runtime Metadata</Modal.Header>\r\n            <Modal.Content scrolling>\r\n              <Modal.Description>\r\n                <pre>\r\n                  <code>{JSON.stringify(metadata.data, null, 2)}</code>\r\n                </pre>\r\n              </Modal.Description>\r\n            </Modal.Content>\r\n          </Modal>\r\n        </Card.Content>\r\n      </Card>\r\n    </Grid.Column>\r\n  );\r\n}\r\n\r\nexport default function Metadata (props) {\r\n  const { api } = useSubstrate();\r\n  return api.rpc && api.rpc.state && api.rpc.state.getMetadata ? (\r\n    <Main {...props} />\r\n  ) : null;\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Card, Icon, Grid } from 'semantic-ui-react';\r\n\r\nimport { useSubstrate } from './substrate-lib';\r\n\r\n//const {ApiPromise, WsProvider} = require('@polkadot/api'); // check required imports\r\n\r\nfunction Main (props) {\r\n  const { api } = useSubstrate();\r\n  const [nodeInfo, setNodeInfo] = useState({});\r\n\r\n  useEffect(() => {\r\n    const getInfo = async () => {\r\n      try {\r\n        const [chain, nodeName, nodeVersion] = await Promise.all([\r\n          api.rpc.system.chain(),\r\n          api.rpc.system.name(),\r\n          api.rpc.system.version()\r\n        ]);\r\n        setNodeInfo({ chain, nodeName, nodeVersion });\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n    getInfo();\r\n  }, [api.rpc.system]);\r\n\r\n  return (\r\n    <Grid.Column>\r\n      <Card>\r\n        <Card.Content>\r\n          <Card.Header>{nodeInfo.nodeName}</Card.Header>\r\n          <Card.Meta>\r\n            <span>{nodeInfo.chain}</span>\r\n          </Card.Meta>\r\n          <Card.Description>\r\n            Built using the{' '}\r\n            <a href='https://github.com/substrate-developer-hub/substrate-front-end-template'>\r\n              Substrate Front End Template\r\n            </a>\r\n          </Card.Description>\r\n        </Card.Content>\r\n        <Card.Content extra>\r\n          <Icon name='setting' />v{nodeInfo.nodeVersion}\r\n        </Card.Content>\r\n      </Card>\r\n    </Grid.Column>\r\n  );\r\n}\r\n\r\nexport default function NodeInfo (props) {\r\n  const { api } = useSubstrate();\r\n  return api.rpc &&\r\n    api.rpc.system &&\r\n    api.rpc.system.chain &&\r\n    api.rpc.system.name &&\r\n    api.rpc.system.version ? (\r\n      <Main {...props} />\r\n    ) : null;\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Form, Input, Grid, Card, Statistic } from 'semantic-ui-react';\r\n\r\nimport { useSubstrate } from './substrate-lib';\r\nimport { TxButton } from './substrate-lib/components';\r\n\r\nfunction Main (props) {\r\n  const { api } = useSubstrate();\r\n  const { accountPair } = props;\r\n\r\n  // The transaction submission status\r\n  const [status, setStatus] = useState('');\r\n\r\n  // The currently stored value\r\n  const [currentValue, setCurrentValue] = useState(0);\r\n  const [formValue, setFormValue] = useState(0);\r\n\r\n  useEffect(() => {\r\n    let unsubscribe;\r\n    api.query.templateModule.something(newValue => {\r\n      // The storage value is an Option<u32>\r\n      // So we have to check whether it is None first\r\n      // There is also unwrapOr\r\n      if (newValue.isNone) {\r\n        setCurrentValue('<None>');\r\n      } else {\r\n        setCurrentValue(newValue.unwrap().toNumber());\r\n      }\r\n    }).then(unsub => {\r\n      unsubscribe = unsub;\r\n    })\r\n      .catch(console.error);\r\n\r\n    return () => unsubscribe && unsubscribe();\r\n  }, [api.query.templateModule]);\r\n\r\n  return (\r\n    <Grid.Column width={8}>\r\n      <h1>Template Module</h1>\r\n      <Card centered>\r\n        <Card.Content textAlign='center'>\r\n          <Statistic\r\n            label='Current Value'\r\n            value={currentValue}\r\n          />\r\n        </Card.Content>\r\n      </Card>\r\n      <Form>\r\n        <Form.Field>\r\n          <Input\r\n            label='New Value'\r\n            state='newValue'\r\n            type='number'\r\n            onChange={(_, { value }) => setFormValue(value)}\r\n          />\r\n        </Form.Field>\r\n        <Form.Field style={{ textAlign: 'center' }}>\r\n          <TxButton\r\n            accountPair={accountPair}\r\n            label='Store Something'\r\n            type='SIGNED-TX'\r\n            setStatus={setStatus}\r\n            attrs={{\r\n              palletRpc: 'templateModule',\r\n              callable: 'doSomething',\r\n              inputParams: [formValue],\r\n              paramFields: [true]\r\n            }}\r\n          />\r\n        </Form.Field>\r\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\r\n      </Form>\r\n    </Grid.Column>\r\n  );\r\n}\r\n\r\nexport default function TemplateModule (props) {\r\n  const { api } = useSubstrate();\r\n  return (api.query.templateModule && api.query.templateModule.something\r\n    ? <Main {...props} /> : null);\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Form, Input, Grid, Label, Icon } from 'semantic-ui-react';\r\nimport { TxButton } from './substrate-lib/components';\r\n\r\nexport default function Main (props) {\r\n  const [status, setStatus] = useState(null);\r\n  const [formState, setFormState] = useState({ addressTo: null, amount: 0 });\r\n  const { accountPair } = props;\r\n\r\n  const onChange = (_, data) =>\r\n    setFormState(prev => ({ ...prev, [data.state]: data.value }));\r\n\r\n  const { addressTo, amount } = formState;\r\n\r\n  return (\r\n    <Grid.Column width={8}>\r\n      <h1>Transfer</h1>\r\n      <Form>\r\n        <Form.Field>\r\n          <Label basic color='teal'>\r\n            <Icon name='hand point right' />\r\n            1 Unit = 1000000000000\r\n          </Label>\r\n        </Form.Field>\r\n        <Form.Field>Transfer more than the existential amount for account with 0 balance</Form.Field>\r\n        <Form.Field>\r\n          <Input\r\n            fluid\r\n            label='To'\r\n            type='text'\r\n            placeholder='address'\r\n            state='addressTo'\r\n            onChange={onChange}\r\n          />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <Input\r\n            fluid\r\n            label='Amount'\r\n            type='number'\r\n            state='amount'\r\n            onChange={onChange}\r\n          />\r\n        </Form.Field>\r\n        <Form.Field style={{ textAlign: 'center' }}>\r\n          <TxButton\r\n            accountPair={accountPair}\r\n            label='Submit'\r\n            type='SIGNED-TX'\r\n            setStatus={setStatus}\r\n            attrs={{\r\n              palletRpc: 'balances',\r\n              callable: 'transfer',\r\n              inputParams: [addressTo, amount],\r\n              paramFields: [true, true]\r\n            }}\r\n          />\r\n        </Form.Field>\r\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\r\n      </Form>\r\n    </Grid.Column>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Form, Input, Grid } from 'semantic-ui-react';\r\nimport { TxButton } from './substrate-lib/components';\r\n\r\nexport default function Main (props) {\r\n  const [status, setStatus] = useState('');\r\n  const [proposal, setProposal] = useState({});\r\n  const { accountPair } = props;\r\n\r\n  const bufferToHex = buffer => {\r\n    return Array.from(new Uint8Array(buffer))\r\n      .map(b => b.toString(16).padStart(2, '0'))\r\n      .join('');\r\n  };\r\n\r\n  const handleFileChosen = file => {\r\n    const fileReader = new FileReader();\r\n    fileReader.onloadend = e => {\r\n      const content = bufferToHex(fileReader.result);\r\n      setProposal(`0x${content}`);\r\n    };\r\n\r\n    fileReader.readAsArrayBuffer(file);\r\n  };\r\n\r\n  return (\r\n    <Grid.Column width={8}>\r\n      <h1>Upgrade Runtime</h1>\r\n      <Form>\r\n        <Form.Field>\r\n          <Input\r\n            type='file'\r\n            id='file'\r\n            label='Wasm File'\r\n            accept='.wasm'\r\n            onChange={e => handleFileChosen(e.target.files[0])}\r\n          />\r\n        </Form.Field>\r\n        <Form.Field style={{ textAlign: 'center' }}>\r\n          <TxButton\r\n            accountPair={accountPair}\r\n            label='Upgrade'\r\n            type='UNCHECKED-SUDO-TX'\r\n            setStatus={setStatus}\r\n            attrs={{\r\n              palletRpc: 'system',\r\n              callable: 'setCode',\r\n              inputParams: [proposal],\r\n              paramFields: [true]\r\n            }}\r\n          />\r\n        </Form.Field>\r\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\r\n      </Form>\r\n    </Grid.Column>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Table, Grid } from \"semantic-ui-react\";\r\nimport { useSubstrate } from \"./substrate-lib\";\r\n\r\nexport default function BlockInfo(props) {\r\n  const { api, keyring } = useSubstrate();\r\n  const [blockInfo, setBlockInfo] = useState({});\r\n\r\n  async function getData() {\r\n    return await api.rpc.chain.subscribeNewHeads((header) =>\r\n      setBlockInfo([{ name: \"Block Number\", value: header.number.toNumber() },{ name: \"Parent Hash\", value: header.parentHash.toHex() }, { name: \"Hash\", value: header.hash.toHex() }, { name: \"Extrinsics Root\", value: header.extrinsicsRoot.toHuman() }, { name: \"State Root\", value: header.stateRoot.toHuman() }])\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    const unsub = getData();\r\n\r\n    return () => unsub && unsub();\r\n  }, [api, keyring, setBlockInfo]);\r\n\r\n  return (\r\n    <Grid.Column>\r\n      <h1>Current Block Info</h1>\r\n      <Table celled striped size=\"small\">\r\n        <Table.Body>\r\n          {blockInfo && blockInfo[0]\r\n            ? blockInfo.map((info) => (\r\n                <Table.Row key={info.name}>\r\n                  <Table.Cell width={1} textAlign=\"right\">\r\n                    {info.name}\r\n                  </Table.Cell>\r\n                  <Table.Cell width={3}>{info.value}</Table.Cell>\r\n                </Table.Row>\r\n              ))\r\n            : null}\r\n        </Table.Body>\r\n      </Table>\r\n    </Grid.Column>\r\n  );\r\n}","import React, { useRef, useState } from \"react\";\r\nimport { Table, Grid, Button } from \"semantic-ui-react\";\r\nimport { useSubstrate } from \"./substrate-lib\";\r\n\r\nexport default function SearchBlock(props) {\r\n  const { api } = useSubstrate();\r\n  const [blockInfo, setBlockInfo] = useState({});\r\n  const inputRef = useRef(null);\r\n\r\n  const handleSearch = async () => {\r\n    setBlockInfo(null);\r\n    const searchValue = inputRef.current.value;\r\n\r\n    if (!searchValue) return;\r\n    let block = {};\r\n    try {\r\n      if (searchValue.indexOf('0x') >= 0) {\r\n        block = await api.rpc.chain.getBlock(searchValue);\r\n      } else {\r\n        const hash = await api.rpc.chain.getBlockHash(searchValue);\r\n        block = await api.rpc.chain.getBlock(hash);\r\n      }\r\n      setBlockInfo([\r\n        { name: \"Number\", value: block.block.header.number.toNumber() },\r\n        { name: \"Parent Hash\", value: block.block.header.parentHash.toHex() },\r\n        { name: \"Hash\", value: block.block.header.hash.toHex() },\r\n        { name: \"extrinsicsRoot\", value: block.block.header.extrinsicsRoot.toHuman() },\r\n        { name: \"State Root\", value: block.block.header.stateRoot.toHuman() },\r\n      ]);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n    \r\n  };\r\n\r\n  return (\r\n    <Grid.Column>\r\n      <h1>Search by Block Number</h1>\r\n      <input ref={inputRef} type=\"text\" />\r\n      <Button onClick={handleSearch}>Search</Button>\r\n      {blockInfo && (\r\n        <Table celled striped size=\"small\">\r\n          <Table.Body>\r\n            {blockInfo && blockInfo[0] ? (\r\n              blockInfo.map((info) => (\r\n                <Table.Row key={info.name}>\r\n                  <Table.Cell width={1} textAlign=\"right\">\r\n                    {info.name}\r\n                  </Table.Cell>\r\n                  <Table.Cell width={3}>{info.value}</Table.Cell>\r\n                </Table.Row>\r\n              ))\r\n            ) : (\r\n              <Table.Row></Table.Row>\r\n            )}\r\n          </Table.Body>\r\n        </Table>\r\n      )}\r\n    </Grid.Column>\r\n  );\r\n}","import React, { useState, createRef } from \"react\";\r\nimport {Container, Dimmer, Loader, Grid, Sticky, Message,} from \"semantic-ui-react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\n\r\n\r\nimport { SubstrateContextProvider, useSubstrate } from \"./substrate-lib\";\r\nimport { DeveloperConsole } from \"./substrate-lib/components\";\r\n\r\nimport AccountSelector from './AccountSelector';\r\nimport Balances from './Balances';\r\nimport BlockNumber from './BlockNumber';\r\nimport Events from './Events';\r\nimport Interactor from './Interactor';\r\nimport Metadata from './Metadata';\r\nimport NodeInfo from './NodeInfo';\r\nimport TemplateModule from './TemplateModule';\r\nimport Transfer from './Transfer';\r\nimport Upgrade from './Upgrade';\r\nimport BlockInfo from \"./BlockInfo\"; //added functionality here\r\nimport Search from \"./Search\";\r\n\r\nfunction Main() {\r\n  const [accountAddress, setAccountAddress] = useState(null);\r\n  const { apiState, keyring, keyringState, apiError } = useSubstrate();\r\n  const accountPair =\r\n    accountAddress &&\r\n    keyringState === \"READY\" &&\r\n    keyring.getPair(accountAddress);\r\n\r\n  const loader = (text) => (\r\n    <Dimmer active>\r\n      <Loader size=\"small\">{text}</Loader>\r\n    </Dimmer>\r\n  );\r\n\r\n  const message = (err) => (\r\n    <Grid centered columns={2} padded>\r\n      <Grid.Column>\r\n        <Message\r\n          negative\r\n          compact\r\n          floating\r\n          header=\"Error Connecting to Substrate\"\r\n          content={`${JSON.stringify(err, null, 4)}`}\r\n        />\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n\r\n  if (apiState === \"ERROR\") return message(apiError);\r\n  else if (apiState !== \"READY\") return loader(\"Connecting to Substrate\");\r\n\r\n  if (keyringState !== \"READY\") {\r\n    return loader(\r\n      \"Loading accounts (please review any extension's authorization)\"\r\n    );\r\n  }\r\n\r\n  const contextRef = createRef();\r\n\r\n  return (\r\n    <div ref={contextRef}>\r\n      <Sticky context={contextRef}>\r\n        <AccountSelector setAccountAddress={setAccountAddress} />\r\n      </Sticky>\r\n      <Container>\r\n        <Grid stackable columns=\"equal\">\r\n          <Grid.Row>\r\n            <BlockInfo />\r\n          </Grid.Row>\r\n          <Grid.Row>\r\n            <Search />\r\n          </Grid.Row>\r\n          <Grid.Row stretched>\r\n            <NodeInfo />\r\n            <Metadata />\r\n            <BlockNumber />\r\n            <BlockNumber finalized />\r\n          </Grid.Row>\r\n          <Grid.Row stretched>\r\n            <Balances />\r\n          </Grid.Row>\r\n          <Grid.Row>\r\n            <Transfer accountPair={accountPair} />\r\n            <Upgrade accountPair={accountPair} />\r\n          </Grid.Row>\r\n          <Grid.Row>\r\n            <Interactor accountPair={accountPair} />\r\n            <Events />\r\n          </Grid.Row>\r\n          <Grid.Row>\r\n            <TemplateModule accountPair={accountPair} />\r\n          </Grid.Row>\r\n        </Grid>\r\n      </Container>\r\n      <DeveloperConsole />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <SubstrateContextProvider>\r\n      <Main />\r\n    </SubstrateContextProvider>\r\n  );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}